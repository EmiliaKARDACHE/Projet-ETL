import pandas as pd
import numpy as np
import os
from pathlib import Path 

def extract_random_sample(file_path, sample_size=50000, random_state=42):
    """
    Extract: Lit un dataset et extrait un √©chantillon al√©atoire
    """
    df = pd.read_csv(file_path)
    print(f"   Dataset original: {len(df)} lignes, {len(df.columns)} colonnes")
    
    if len(df) < sample_size:
        sample_size = len(df)
    
    df_sample = df.sample(n=sample_size, random_state=random_state)
    
    return df_sample

def transform_data(df):
    """
    Transform: Focus sur les ingredients et instructions (recipe descriptions)
    """
    print("üîß TRANSFORMATION: Focus sur ingredients et instructions")
    
    df_transformed = df.copy()
    
    # 1. V√©rifier les colonnes importantes
    required_cols = ['ingredients', 'instructions', 'title']
    missing_cols = [col for col in required_cols if col not in df_transformed.columns]
    if missing_cols:
        print(f"   ‚ö†Ô∏è  Colonnes manquantes: {missing_cols}")
        return df_transformed
    
    # 2. Nettoyer les donn√©es manquantes pour ingredients et instructions
    print(f"   Lignes avec ingredients manquants: {df_transformed['ingredients'].isnull().sum()}")
    print(f"   Lignes avec instructions manquantes: {df_transformed['instructions'].isnull().sum()}")
    
    # Supprimer les lignes sans ingredients OU instructions
    df_transformed = df_transformed.dropna(subset=['ingredients', 'instructions'])
    print(f"   Lignes apr√®s nettoyage: {len(df_transformed)}")
    
    # 3. TRANSFORMATION des INGREDIENTS
    print("   üìã Traitement des ingredients...")
    
    # Nettoyer les ingredients
    df_transformed['ingredients_clean'] = df_transformed['ingredients'].astype(str).str.strip()
    
    # S√©parer les ingredients (par virgule)
    df_transformed['ingredients_list'] = df_transformed['ingredients_clean'].str.split(',')
    
    # Compter le nombre d'ingredients
    df_transformed['ingredients_count'] = df_transformed['ingredients_list'].str.len()
    
    # Extraire les ingredients principaux (supprimer quantit√©s et d√©tails)
    import re
    def extract_main_ingredient(ingredient_text):
        # Supprimer les quantit√©s (chiffres + unit√©s)
        cleaned = re.sub(r'\d+[\s]*(?:cups?|tablespoons?|teaspoons?|ounces?|pounds?|lbs?|oz|tsp|tbsp|cups?)', '', ingredient_text, flags=re.IGNORECASE)
        # Supprimer les d√©tails entre parenth√®ses
        cleaned = re.sub(r'\([^)]*\)', '', cleaned)
        # Supprimer les mots de description courants
        cleaned = re.sub(r'\b(?:fresh|dried|chopped|diced|minced|sliced|large|small|medium)\b', '', cleaned, flags=re.IGNORECASE)
        # Nettoyer les espaces et virgules
        cleaned = re.sub(r'[,\s]+', ' ', cleaned).strip()
        return cleaned.lower() if cleaned else ingredient_text.lower()
    
    df_transformed['ingredients_main'] = df_transformed['ingredients_list'].apply(
        lambda ing_list: [extract_main_ingredient(ing.strip()) for ing in ing_list if ing.strip()]
    )
    
    # 4. TRANSFORMATION des INSTRUCTIONS (Recipe Descriptions)
    print("   üìù Traitement des instructions...")
    
    # Nettoyer les instructions
    df_transformed['instructions_clean'] = df_transformed['instructions'].astype(str).str.strip()
    
    # Supprimer les balises HTML si pr√©sentes
    df_transformed['instructions_clean'] = df_transformed['instructions_clean'].str.replace(r'<[^>]+>', '', regex=True)
    
    # Diviser en √©tapes (par num√©ros ou points)
    df_transformed['instructions_steps'] = df_transformed['instructions_clean'].str.split(r'(?:\d+\.|\<li\>)', regex=True)
    
    # Compter le nombre d'√©tapes
    df_transformed['steps_count'] = df_transformed['instructions_steps'].apply(lambda x: len([step for step in x if step.strip()]))
    
    # Calculer la longueur des instructions
    df_transformed['instructions_length'] = df_transformed['instructions_clean'].str.len()
    
    # Extraire les mots-cl√©s de cuisson
    cooking_methods = ['bake', 'fry', 'boil', 'grill', 'roast', 'steam', 'saut√©', 'simmer', 'mix', 'blend']
    for method in cooking_methods:
        df_transformed[f'uses_{method}'] = df_transformed['instructions_clean'].str.contains(method, case=False, na=False)
    
    # 5. Statistiques finales
    print(f"   ‚úÖ Ingredients moyens par recette: {df_transformed['ingredients_count'].mean():.1f}")
    print(f"   ‚úÖ √âtapes moyennes par recette: {df_transformed['steps_count'].mean():.1f}")
    print(f"   ‚úÖ Longueur moyenne instructions: {df_transformed['instructions_length'].mean():.0f} caract√®res")
    
    # 6. Supprimer les doublons bas√©s sur title + ingredients
    df_transformed = df_transformed.drop_duplicates(subset=['title', 'ingredients_clean'])
    print(f"   ‚úÖ Lignes finales apr√®s d√©doublonnage: {len(df_transformed)}")
    
    return df_transformed

def main():
    """
    Fonction principale du processus ETL (sans Load)
    """
    # Chemin sp√©cifique pour le dataset Spoonacular
    selected_dataset = Path(r"c:\Users\FRBN6849\Downloads\Projet-ETL-main\Projet-ETL-main\data\raw\Spoonacular\spoonacular_recipes.csv")
    
    print(f"üéØ Dataset s√©lectionn√©: {selected_dataset.name}")
    print("üéØ Focus sur: ingredients et instructions (recipe description)")
    
    try:
        df_sample = extract_random_sample(selected_dataset, sample_size=50000)
        
        df_final = transform_data(df_sample)
        
        output_path = Path(__file__).parent / f"transformed_{selected_dataset.stem}_sample.csv"
        df_final.to_csv(output_path, index=False)
        
        print(f"   Dataset final: {len(df_final)} lignes, {len(df_final.columns)} colonnes")
        
        return df_final
        
    except Exception as e:
        return None

if __name__ == "__main__":
    result = main()
    
    if result is not None:
        print(result.head())
        print(result.info())

